VARARGS
-------

* and ** support functions to take any number of arguments.

* - tuple
** - dictionary, only works for keyword arguments

* and ** can also be used when calling a function.

these techniques are convenient when we can not predict the number of arguments that will be passed to a function.

* works for files (any iteable object)

func(*open('fname')

Functions objects can also be passed to functions just like any other object

def kwonly(a, *b, c): # here c must be passed by keywork only

def kwonly(a, *, b, c): # a may be passed by position or keyword but b and c should be passed by keyword only

def kwonly(a, *, b='spam', c='ham'): # b and c are optional, if given they should be passed using keyword only

named arguments can not appear after **

09/02/2013:

Function should be independent of things outside of it.

Minimise external dependencies in functions and other program components.

Python's object model and lack of type declarations make it incredibly flexible programming language.

Introspection tools allows to explore the internals/ implementation details.

function attributes can be used to attach state information to function objects DIRECTLY.

ex: if x is a function, x.count = 1 will attach an attribute called count.


Function Annotation:
- attached to __annonantions__ attribute for use by other tools.

Lambda:
Anonymous Functions
An expression that generates function objects.
lambda returns a new function.
lambda's body is a single statement, but a block of statements. this is by design, to limit program nesting.

used:
1. to inline a function definition (no name)
2. defer the execution of a piece of code
3. they bring code proximity
4. easier to use as call back handlers

map function: A way to apply functions to iterables
> applies the passed in function to each item in an iterable object and returns a list returning all the function call results.
> map needs a function, it can not take arbitrary expression
> map is an iterator


Filter and Reduce:
-----------------
filter - filters out the items  based on test function
reduce - applies functions to pairs of items. accepts an iterable but it is not an iterator itself. it returns a single result.

They return iterables

list comprehension: applies an expression (not a function) to items in an iterbel. so they are more general tools.

Generators:
-----------

Python provides tools that produce results only when needed instead of all at once.

- Generator Functions, def + yield
- Generator Expressions, return an object that produces results on demand

They save memory, split computation time
They implement an ITERATION PROTOCOL
Functions containing yield statement are generators
Poor mans multithreading device

It is possible to implement generator objects with classes

Modules
-------
from - copies the names from one module to another it does not assign































